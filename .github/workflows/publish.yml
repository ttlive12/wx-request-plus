name: Publish to NPM

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # 推送版本标签时触发

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure npm
        run: |
          # 删除可能存在的package-lock.json
          rm -f package-lock.json
          
          # 强制使用公共npm源
          npm config set registry https://registry.npmjs.org/
          npm config set strict-ssl false
          npm config delete proxy
          npm config delete https-proxy
          npm config delete http-proxy
          
          # 显示npm配置
          npm config ls -l
      
      - name: Clean npm cache
        run: npm cache clean --force
      
      - name: Install dependencies
        run: npm install --no-fund --no-audit --registry=https://registry.npmjs.org/
      
      - name: Install gulp globally
        run: npm install -g gulp-cli --registry=https://registry.npmjs.org/
      
      - name: Build
        run: npm run build
      
      - name: Skip tests for now
        run: echo "Skipping tests"
      
      - name: Setup npm auth
        run: |
          # 创建.npmrc文件
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
          echo "otp=false" >> .npmrc
          
          # 验证npm配置
          cat .npmrc
          npm config ls -l
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to NPM
        if: startsWith(github.ref, 'refs/tags/v')
        run: npm publish --access public --otp=false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            Changes in this Release:
            ${{ github.event.head_commit.message }} 